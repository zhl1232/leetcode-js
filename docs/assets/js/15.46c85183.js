(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{372:function(t,a,r){"use strict";r.r(a);var e=r(44),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"前序遍历构造二叉搜索树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前序遍历构造二叉搜索树"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[t._v("前序遍历构造二叉搜索树"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("难度：Medium")]),t._v(" "),r("li",[t._v("标签：栈, 树, 二叉搜索树, 数组, 二叉树, 单调栈")])]),t._v(" "),r("h2",{attrs:{id:"刷题思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#刷题思路"}},[t._v("#")]),t._v(" 刷题思路")]),t._v(" "),r("ul",[r("li",[t._v("[ ] xx")]),t._v(" "),r("li",[t._v("[ ] xx")])]),t._v(" "),r("h3",{attrs:{id:"方法-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方法-1"}},[t._v("#")]),t._v(" 方法 1")]),t._v(" "),r("ul",[r("li",[t._v("复杂度：\n"),r("ul",[r("li",[t._v("时间 O()")]),t._v(" "),r("li",[t._v("空间 O()")])])])]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("\n")])])]),r("h3",{attrs:{id:"方法-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方法-2"}},[t._v("#")]),t._v(" 方法 2")]),t._v(" "),r("ul",[r("li",[t._v("复杂度：\n"),r("ul",[r("li",[t._v("时间 O()")]),t._v(" "),r("li",[t._v("空间 O()")])])])]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);